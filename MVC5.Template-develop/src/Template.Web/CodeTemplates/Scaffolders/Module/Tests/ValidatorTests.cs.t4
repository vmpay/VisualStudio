<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using Template.Data.Core;
using Template.Objects;
using Template.Tests.Data;
using Template.Validators;
using System;
using System.Web.Mvc;
using Xunit;

namespace Template.Tests.Unit.Validators
{
    public class <#= Model.Validator #>Tests : IDisposable
    {
        private <#= Model.Validator #> validator;
        private TestingContext context;
        private <#= Model.Model #> <#= Model.ModelVarName #>;

        public <#= Model.Validator #>Tests()
        {
            context = new TestingContext();
            validator = new <#= Model.Validator #>(new UnitOfWork(context));

            context.DropData();
            SetUpData();
        }
        public void Dispose()
        {
            context.Dispose();
            validator.Dispose();
        }

        #region Method: CanCreate(<#= Model.View #> view)

        [Fact]
        public void CanCreate_InvalidState_ReturnsFalse()
        {
            validator.ModelState.AddModelError("Test", "Test");

            Assert.False(validator.CanCreate(ObjectFactory.Create<#= Model.View #>()));
        }

        [Fact]
        public void CanCreate_Valid<#= Model.ShortModel #>()
        {
            Assert.True(validator.CanCreate(ObjectFactory.Create<#= Model.View #>()));
        }

        #endregion

        #region Method: CanEdit(<#= Model.View #> view)

        [Fact]
        public void CanEdit_InvalidState_ReturnsFalse()
        {
            validator.ModelState.AddModelError("Test", "Test");

            Assert.False(validator.CanEdit(ObjectFactory.Create<#= Model.View #>()));
        }

        [Fact]
        public void CanEdit_Valid<#= Model.ShortModel #>()
        {
            Assert.True(validator.CanEdit(ObjectFactory.Create<#= Model.View #>()));
        }

        #endregion

        #region Test helpers

        private void SetUpData()
        {
            <#= Model.ModelVarName #> = ObjectFactory.Create<#= Model.Model #>();

            context.Set<<#= Model.Model #>>().Add(<#= Model.ModelVarName #>);
            context.SaveChanges();
        }

        #endregion
    }
}
