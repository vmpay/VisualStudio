<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
using AutoMapper;
using AutoMapper.QueryableExtensions;
using Template.Data.Core;
using Template.Objects;
using Template.Services;
using Template.Tests.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using Xunit;

namespace Template.Tests.Unit.Services
{
    public class <#= Model.Service #>Tests : IDisposable
    {
        private <#= Model.Service #> service;
        private TestingContext context;
        private <#= Model.Model #> <#= Model.ModelVarName #>;

        public <#= Model.Service #>Tests()
        {
            context = new TestingContext();
            service = new <#= Model.Service #>(new UnitOfWork(context));

            context.DropData();
            SetUpData();
        }
        public void Dispose()
        {
            service.Dispose();
            context.Dispose();
        }

        #region Method: Get<TView>(String id)

        [Fact]
        public void Get_ReturnsViewById()
        {
            <#= Model.View #> actual = service.Get<<#= Model.View #>>(<#= Model.ModelVarName #>.Id);
            <#= Model.View #> expected = Mapper.Map<<#= Model.View #>>(<#= Model.ModelVarName #>);

            Assert.Equal(expected.CreationDate, actual.CreationDate);
            Assert.Equal(expected.Id, actual.Id);

            Assert.True(false, "Not all properties tested");
        }

        #endregion

        #region Method: GetViews()

        [Fact]
        public void GetViews_Returns<#= Model.ShortModel #>Views()
        {
            IEnumerator<<#= Model.View #>> actual = service.GetViews().GetEnumerator();
            IEnumerator<<#= Model.View #>> expected = context
                .Set<<#= Model.Model #>>()
                .ProjectTo<<#= Model.View #>>()
                .OrderByDescending(<#= Model.ModelVarName #> => <#= Model.ModelVarName #>.CreationDate)
                .GetEnumerator();

            while (expected.MoveNext() | actual.MoveNext())
            {
                Assert.Equal(expected.Current.CreationDate, actual.Current.CreationDate);
                Assert.Equal(expected.Current.Id, actual.Current.Id);
            }

            Assert.True(false, "Not all properties tested");
        }

        #endregion

        #region Method: Create(<#= Model.View #> view)

        [Fact]
        public void Create_<#= Model.ShortModel #>()
        {
            <#= Model.View #> view = ObjectFactory.Create<#= Model.View #>(2);

            service.Create(view);

            <#= Model.Model #> actual = context.Set<<#= Model.Model #>>().AsNoTracking().Single(model => model.Id == view.Id);
            <#= Model.View #> expected = view;

            Assert.Equal(expected.CreationDate, actual.CreationDate);
            Assert.Equal(expected.Id, actual.Id);

            Assert.True(false, "Not all properties tested");
        }

        #endregion

        #region Method: Edit(<#= Model.View #> view)

        [Fact]
        public void Edit_<#= Model.ShortModel #>()
        {
            <#= Model.Model #> <#= Model.ModelVarName #> = context.Set<<#= Model.Model #>>().AsNoTracking().Single();
            <#= Model.View #> view = ObjectFactory.Create<#= Model.View #>();
            Assert.True(false, "No update made");

            service.Edit(view);

            <#= Model.Model #> actual = context.Set<<#= Model.Model #>>().AsNoTracking().Single();
            <#= Model.Model #> expected = <#= Model.ModelVarName #>;

            Assert.Equal(expected.CreationDate, actual.CreationDate);
            Assert.Equal(expected.Id, actual.Id);

            Assert.True(false, "Not all properties tested");
        }

        #endregion

        #region Method: Delete(String id)

        [Fact]
        public void Delete_<#= Model.ShortModel #>()
        {
            service.Delete(<#= Model.ModelVarName #>.Id);

            Assert.Empty(context.Set<<#= Model.Model #>>());
        }

        #endregion

        #region Test helpers

        private void SetUpData()
        {
            <#= Model.ModelVarName #> = ObjectFactory.Create<#= Model.Model #>();

            context.Set<<#= Model.Model #>>().Add(<#= Model.ModelVarName #>);
            context.SaveChanges();
        }

        #endregion
    }
}
